name: all
on:
  push:
  create:
    tags:
      - v*
jobs:
  # elm ui compilation
  build-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/costanza-ui
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: "set output: short_sha"
        id: vars
        run: echo "SHA_SHORT=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT
      - name: "set output: verify"
        run: echo "${{ steps.vars.outputs.SHA_SHORT }}"

      - name: "apt update"
        run: sudo apt-get update

      - name: "build-deps - xsltproc"
        run: sudo apt-get install xsltproc -y

      - name: "build-deps - elm download"
        run: curl -L -l -o elm.gz https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz

      - name: "build-deps - elm unpack"
        run: gunzip elm.gz && chmod +x elm

      - name: "build-deps - elm install"
        run: sudo mv elm /usr/local/bin/

      - name: "build-deps - elm version"
        run: elm --version

      - name: "build-deps - node deps"
        run: npm i

      - name: "lint - ts"
        run: npm run lint:js

      - name: "lint - elm"
        run: npm run lint:elm -- --validate

      - name: "build - make release"
        run: make release \
          VERSION=${{ steps.vars.outputs.SHA_SHORT }} \
          LOGIN_URL=${{ env.LOGIN_URL }} \
          LOGOUT_URL=${{ env.LOGOUT_URL }} \
          API_ROOT=${{ env.API_ROOT }} \
          UI_ROOT=${{ env.UI_ROOT }} \
          WS_URL=${{ env.WS_URL }} \
          ASSET_ROOT=${{ env.ASSET_ROOT }} \
        env:
          LOGIN_URL: https://www.krumpled.com/tracing/api/auth/start
          LOGOUT_URL: https://www.krumpled.com/tracing/api/auth/end
          API_ROOT: /tracing/api
          UI_ROOT: /tracing/
          WS_URL: wss://www.krumpled.com/tracing/api/ws
          ASSET_ROOT: /tracing/

      # bundling + artifact generation:
      - name: "bundle - prepare"
        run: mkdir -p costanza-ui-dist
      - name: "bundle - populate"
        run: cp -r target/release costanza-ui-dist
      - name: "bundle - create"
        run: tar cvzf costanza-ui-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz costanza-ui-dist

      - uses: actions/upload-artifact@v3
        with:
          name: costanza-ui-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz
          path: src/costanza-ui/costanza-ui-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz

  # rust test + clippy
  build-x86:
    name: "x86_64-unknown-linux-gnu compilation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: "rustup - download"
        run: curl --output /tmp/install-rust.sh --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs
      - name: "rustup - install"
        run: sh /tmp/install-rust.sh -y
      - name: "rustup - component add"
        run: . $HOME/.cargo/env && rustup component add clippy
      - name: "cargo clippy"
        run: . $HOME/.cargo/env && cargo clippy

  build-armv7:
    name: "armv7-unknown-linux-gnueabihf compilation"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: ghcr.io/iced-rs/armv7:latest
    steps:
      - uses: actions/checkout@v3
      - name: "set output: verify git version"
        run: git --version
      - name: "set output: short_sha"
        id: vars
        run: echo "SHA_SHORT=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT
      - name: "set output: verify"
        run: echo "${{ steps.vars.outputs.SHA_SHORT }}"
      - name: "basic - whoami"
        run: "whoami"

      - name: "apt - update"
        run: apt-get update
      - name: "apt - install things"
        run: apt-get install libssl-dev:armhf -y

      - name: "cargo - build"
        run: ". /root/.cargo/env && cargo build --target armv7-unknown-linux-gnueabihf --release --no-default-features"
        env:
          COSTANZA_VERSION: "${{ steps.vars.outputs.SHA_SHORT }}"

      # bundling + artifact generation:
      - name: "bundle - prepare"
        run: mkdir -p costanza-dist/bin
      - name: "bundle - populate (costanza-m)"
        run: cp target/armv7-unknown-linux-gnueabihf/release/costanza-m costanza-dist/bin/costanza-m
      - name: "bundle - populate (costanza-eui)"
        run: cp target/armv7-unknown-linux-gnueabihf/release/costanza-eui costanza-dist/bin/costanza-eui
      - name: "bundle - create"
        run: tar cvzf costanza-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz costanza-dist

      - uses: actions/upload-artifact@v3
        with:
          name: costanza-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz
          path: costanza-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz

  publish:
    runs-on: ubuntu-latest
    needs: ["build-ui", "build-armv7"]
    steps:
      - uses: actions/checkout@v3

      - name: "set output: short_sha"
        id: vars
        run: echo "SHA_SHORT=$(echo $GITHUB_SHA | head -c 7)">>$GITHUB_OUTPUT
      - name: "set output: verify"
        run: echo "${{ steps.vars.outputs.SHA_SHORT }}"

      - uses: actions/download-artifact@v3
        with:
          name: "costanza-armv7-unknown-linux-gnueabihf-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz"
      - uses: actions/download-artifact@v3
        with:
          name: "costanza-ui-${{ steps.vars.outputs.SHA_SHORT }}.tar.gz"
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "./*.tar.gz"
          generate_release_notes: true
